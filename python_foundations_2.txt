Objectives:

    * be comfortable with all basic Python built-in types
        * numerics
        * strings
        * sequences
            slicing, iteration
            list comps, dict comps, generator comps
        * mappings
        * sets
        * understand the bigO performance characteristics of the types
    * have facility with built-ins and keywords



    * have mastery of logical flow control
        * finite and infinite loops
            * else in loops
            * continue and break
        * conditionals and boolean values of objects
            * truthiness
        * error handling
            try/except/else/finally
    * understand the difference between mutable and immutable objects
    * understand that assignment is binding names to objects, not variables
    * understand duck-typing
        * uses in mocking functionality for testing
    * be comfortable working in the Python interpreter
        have a well-established and comfortable environment to work in
            editor
            terminal
            iPython
    * be able to save and execute a Python file
        * if __name__ == '__main__'
    * understanding modules, packages and distributions
        * know how to use pip/setuptools to install stuff
        * know where the stuff you install is located
        * know what __init__.py is and does
        * understand the Python path and importing symbols
            * import x
            * from x import y
            * from x.y.z import foo
        * locals() and globals(), and namespaces
    * writing functions
        * parameter lists
        * args/kwargs
        * default values
        * understanding the mutable default argument trap
    * Object oriented programming
        * new-style classes (all class trees should inherit from object)
        * class inheritance and method override
            * super????
            * __mro__
        * multiple inheritance and mixins
        * magic methods (beyond __init__)
            * __str__, __unicode__, etc.
            * __eq__, __lt__, __gt__ ??(use these or __cmp__)??
        * class vs. instance attributes
        * __init__
        * classmethods
        * staticmethod
        * properties

    * TESTING
        * py.test
        * inline tests in __main__ block
        * coverage


